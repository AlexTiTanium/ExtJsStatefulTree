{"ts":1359089291107,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n* TreeStateful plugin for ExtJs 4.1\n* \n* @site https://github.com/AlexTiTanium/ExtJsStatefulTree \n* @author Alex Kucherenko <kucherenko.email@gmail.com>\n* @copyright 2012 Alex Kucherenko\n* @version 1.0.0\n*\n* MIT LICENSE\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* \"Software\"), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nExt.define('Core.plugin.TreeStateful', {\n  extend: 'Ext.AbstractPlugin',\n  alias: 'plugin.treestateful',\n\n  init : function(view) {\n\n    var me = this;\n\n    view.addStateEvents('afteritemcollapse', 'afteritemexpand');\n\n    view['getState'] = me.getState;\n    view['saveState'] = me.saveState;\n\n    view.getTreeStore().on(\"load\",  me.applyState, view);\n  },\n\n  saveState: function() {\n\n    var me = this,\n        id = me.stateful && me.getStateId(),\n        state;\n\n    if (id) {\n      state = me.getState() || [];    //pass along for custom interactions\n\n      if(state.length != 0){\n        Ext.state.Manager.set(id, state);\n      }\n    }\n  },\n\n  getState: function(){\n\n    var ids = [];\n\t\n\t// Warning! Use private API: tree.flatten()\n    var expanded = Ext.Array.filter(this.getTreeStore().tree.flatten(), function (node) {\n      return node.get('expanded') == true;\n    });\n\n    Ext.each(expanded, function (node) {\n      if(node.getId()=='root') return;\n      ids.push(node.getId());\n    });\n\n    if(ids.length == 0){ ids = null; }\n\n    return ids;\n  },\n\n  applyState: function(){\n\n    var me = this,\n    id = me.stateful && me.getStateId(),\n    state,\n    store = me.getTreeStore(),\n    node;\n\n    if (id) {\n\n      state = Ext.state.Manager.get(id);\n\n      if (state) {\n        state = Ext.apply([], state);\n\n        Ext.each(state, function (id) {\n          node = store.getNodeById(id);\n          if(node){\n            node.bubble(function(node){node.expand()});\n          }\n        });\n      }\n    }\n\n  }\n\n});"]],"start1":0,"start2":0,"length1":0,"length2":2804}]],"length":2804}
