{"ts":1359025450536,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Ext.require('Ext.ux.app.RoutedApplication', function () {\n    App = Ext.create('Ext.ux.app.RoutedApplication', {\n\n    appFolder:'app',\n    name:'App',\n    controllers:[\n        'Base',\n        'Login',\n        'Dashboard',\n        'Base',\n        'Albums',\n        'Artists',\n        'Songs'\n    ],\n    requires:[\n        'App.view.Viewport',\n        'App.view.FormWindow'\n    ],\n\n    launch:function () {\n        var me = this;\n\n        // create Viewport instance\n        var viewport = Ext.create('App.view.Viewport', {\n            controller:this\n        });\n\n        // Get a reference to main TabPanel.  This is where top-level controllers will render themselves.\n        // eg: this.render(\"workspace\", this.getArtistsIndexView());\n        // Think of it as a \"render target\".\n        var workspace = viewport.down('container[region=center]');\n        this.addLayout('workspace', workspace);\n\n        // Create Window instance for rendering popup forms upon.  Controllers could render a form upon this shared\n        // window instance via:\n        // this.render(\"window\", this.getAlbumsCreateView());\n        var popup = Ext.create('App.view.FormWindow', {});\n        this.addLayout('window', popup);\n\n        Ext.defer(this.hideLoadingScreen, 250);\n\n        Ext.History.init(me.initDispatch, me);\n        Ext.History.on('change', me.historyChange, me);\n\n        // Start with dashboard\n        token = Ext.History.getToken();\n        if (token == null) {\n\n            Ext.History.add('dashboard', true);\n//\t\t\t    Ext.dispatch('dashboard');\n        }\n    },\n    initDispatch:function () {\n        var me = this,\n            token = Ext.History.getToken();\n        Ext.log('Init dispatch with token: ' + token);\n        me.historyChange(token);\n    },\n\n    historyChange:function (token) {\n        var me = this;\n        // and check if token is set\n        Ext.log('History changed to: ' + token);\n        if (token) {\n\n            Ext.dispatch(token);\n//                var route = Ext.Router.recognize(token);\n//                //me.dispatch(route);\n//                console.log(route);\n        }\n    },\n    hideLoadingScreen:function() {\n        Ext.get('loading').remove();\n        Ext.fly('loading-mask').animate({\n            opacity:0,\n            remove:true\n        });\n    }\n})\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":2302}]],"length":2302}
{"contributors":[],"silentsave":false,"ts":1359025910248,"patch":[[{"diffs":[[0,"Ext."],[-1,"require('Ext.ux.app.RoutedApplication', function () {\n    App = Ext.create('Ext.ux.app.RoutedApplication', {\n\n    appFolder:'app',\n    name:'App',\n    controllers:[\n        'Base',\n        'Login"],[1,"application({\n    name: 'Blog"],[0,"',\n    "],[-1,"  "],[-1,"  'Dashboard',\n        'Base',\n        'Albums',\n        'Artists',\n        'Songs'\n    ],\n    requires:[\n        'App.view.Viewport',\n        'App.view.FormWindow'\n    ],\n\n    launch:function () {\n        var me = this;\n\n        // create Viewport instance\n        var viewport = Ext.create('App.view.Viewport', {\n            controller:this\n        });\n\n        // Get a reference to main TabPanel.  This is where top-level controllers will render themselves.\n        // eg: this.render(\"workspace\", this.getArtistsIndexView());\n        // Think of it as a \"render target\".\n        var workspace = viewport.down('container[region=center]');\n        this.addLayout('workspace', workspace);\n\n        // Create Window instance for rendering popup forms upon.  Controllers could render a form upon this shared\n        // window instance via:\n        // this.render(\"window\", this.getAlbumsCreateView());\n        var popup = Ext.create('App.view.FormWindow', {});\n        this.addLayout('window', popup);\n\n        Ext.defer(this.hideLoadingScreen, 250);\n\n        Ext.History.init(me.initDispatch, me);\n        Ext.History.on('change', me.historyChange, me);\n\n        // Start with dashboard\n        token = Ext.History.getToken();\n        if (token == null) {\n\n            Ext.History.add('dashboard', true);\n//\t\t\t    Ext.dispatch('dashboard');\n        }\n    },\n    initDispatch:function () {\n        var me = this,\n            token = Ext.History.getToken();\n        Ext.log('Init dispatch with token: ' + token);\n        me.historyChange(token);\n    },\n\n    historyChange:function (token) {\n        var me = this;\n        // and check if token is set\n        Ext.log('History changed to: ' + token);\n        if (token) {\n\n            Ext.dispatch(token);\n//                var route = Ext.Router.recognize(token);\n//                //me.dispatch(route);\n//                console.log(route);\n        }\n    },\n    hideLoadingScreen:function() {\n        Ext.get('loading').remove();\n        Ext.fly('loading-mask').animate({\n            opacity:0,\n            remove:true\n        });\n    }\n})"],[1,"models: ['Post', 'Comment'],\n    controllers: ['Posts', 'Comments'],\n\n    launch: function() {\n        \n    }"],[0,"\n});"]],"start1":0,"start2":0,"length1":2301,"length2":153}]],"length":154,"saved":false}
{"ts":1359026284042,"patch":[[{"diffs":[[0,"e: '"],[-1,"Blog',\n    models: ['Post', 'Comment'],\n    controller"],[1,"Example',\n    view"],[0,"s: ['"],[-1,"P"],[1,"p"],[0,"osts"],[-1,"', 'Comments"],[1,".List', 'posts.Edit"],[0,"'],\n"],[-1,"\n"],[0,"    "]],"start1":25,"start2":25,"length1":89,"length2":59}]],"length":124,"saved":false}
{"ts":1359026337481,"patch":[[{"diffs":[[0,": ['"],[-1,"posts.List', 'posts.Edit"],[1,"SimpleTree"],[0,"'],\n"]],"start1":48,"start2":48,"length1":32,"length2":18}]],"length":110,"saved":false}
{"ts":1359026398970,"patch":[[{"diffs":[[0,"ation({\n"],[1,"    \n"],[0,"    name"]],"start1":10,"start2":10,"length1":16,"length2":21},{"diffs":[[0,"Tree'],\n"],[1,"    \n"],[0,"    laun"]],"start1":63,"start2":63,"length1":16,"length2":21},{"diffs":[[0," {\n        \n"],[1,"        \n        \n"],[0,"    }\n});\n"]],"start1":98,"start2":98,"length1":22,"length2":40}]],"length":138,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359088088445,"patch":[[{"diffs":[[0,"Tree'],\n"],[1,"    stores: ['SimpleTreeSrore']\n"],[0,"    \n   "]],"start1":63,"start2":63,"length1":16,"length2":48},{"diffs":[[0,"        \n       "],[-1," "],[0,"\n        \n    }\n"]],"start1":133,"start2":133,"length1":33,"length2":32}]],"length":169,"saved":false}
{"ts":1359088094061,"patch":[[{"diffs":[[0,"eSrore']"],[1,","],[0,"\n    \n  "]],"start1":94,"start2":94,"length1":16,"length2":17}]],"length":170,"saved":false}
{"ts":1359088117947,"patch":[[{"diffs":[[0,"    \n       "],[1,"Ext.create('SimpleTree');"],[0,"\n        \n  "]],"start1":138,"start2":138,"length1":24,"length2":49}]],"length":195,"saved":false}
{"ts":1359088534610,"patch":[[{"diffs":[[0,"pleTreeS"],[-1,"r"],[1,"t"],[0,"ore'],\n "]],"start1":88,"start2":88,"length1":17,"length2":17}]],"length":195,"saved":false}
{"ts":1359088603683,"patch":[[{"diffs":[[0,"create('"],[1,"view."],[0,"SimpleTr"]],"start1":154,"start2":154,"length1":16,"length2":21}]],"length":200,"saved":false}
{"ts":1359088637323,"patch":[[{"diffs":[[0,"create('"],[1,"Example."],[0,"view.Sim"]],"start1":154,"start2":154,"length1":16,"length2":24}]],"length":208,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359115564031,"patch":[[{"diffs":[[0,"ample',\n"],[1,"    \n    controllers: ['SimpleTree'],\n"],[0,"    view"]],"start1":36,"start2":36,"length1":16,"length2":54}]],"length":246,"saved":false}
